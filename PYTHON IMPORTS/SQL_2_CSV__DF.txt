import pandas as pd
import pyodbc
import logging
from contextlib import contextmanager

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseConnection:
    def __init__(self, server, database):
        """
        Initialize database connection parameters
        
        Args:
            server (str): SQL Server instance name
            database (str): Database name
        """
        self.server = server
        self.database = database
        self.connection_string = (
            f'DRIVER={{SQL Server}};'
            f'SERVER={server};'
            f'DATABASE={database};'
            'Trusted_Connection=yes;'
        )
        self.connection = None

    @contextmanager
    def get_connection(self):
        """Context manager for database connection"""
        try:
            self.connection = pyodbc.connect(self.connection_string)
            logger.info(f"Connected to database {self.database} on {self.server}")
            yield self.connection
        except Exception as e:
            logger.error(f"Error connecting to database: {str(e)}")
            raise
        finally:
            if self.connection:
                self.connection.close()
                logger.info("Database connection closed")

    def query_to_dataframe(self, query, params=None):
        """
        Execute SQL query and return results as DataFrame
        
        Args:
            query (str): SQL query to execute
            params (tuple, optional): Parameters for SQL query
            
        Returns:
            pandas.DataFrame: Query results
        """
        try:
            with self.get_connection() as connection:
                if params:
                    df = pd.read_sql(query, connection, params=params)
                else:
                    df = pd.read_sql(query, connection)
                logger.info(f"Query executed successfully. Retrieved {len(df)} rows")
                return df
        except Exception as e:
            logger.error(f"Error executing query: {str(e)}")
            raise

    def save_to_csv(self, df, filename, index=False):
        """
        Save DataFrame to CSV file
        
        Args:
            df (pandas.DataFrame): DataFrame to save
            filename (str): Output filename
            index (bool): Whether to include index in CSV
        """
        try:
            df.to_csv(filename, index=index)
            logger.info(f"Data saved to {filename}")
        except Exception as e:
            logger.error(f"Error saving to CSV: {str(e)}")
            raise

def main():
    # Database connection parameters
    server = 'vm22-cmdbsql01'  # Your SQL Server instance name
    database = 'CLS_SYNC_DB'
    
    # Initialize database connection
    db = DatabaseConnection(server, database)
    
    # Your SQL query
    query = '''
    
    SELECT *
    FROM MASTER
    '''
    
    try:
        # Execute query and get results
        df = db.query_to_dataframe(query)
        
        # Display first few rows
        print("\nFirst few rows of the data:")
        print(df.head())
        
        # Display basic information about the DataFrame
        print("\nDataFrame Info:")
        print(df.info())
        
        # Optionally save to CSV
        # db.save_to_csv(df, 'output.csv')
        
    except Exception as e:
        logger.error(f"Error in main execution: {str(e)}")

if __name__ == "__main__":
    main()

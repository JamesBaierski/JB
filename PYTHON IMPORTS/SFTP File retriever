import paramiko
import pysftp
import os
from datetime import datetime, timedelta
import logging
from pathlib import Path
import re

# Disable host key checking
import warnings
warnings.filterwarnings('ignore', 'Unknown ssh-rsa host key')

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('sftp_retriever.log', mode='w'),
        logging.StreamHandler()
    ]
)

class SFTPFileRetriever:
    def __init__(self, host, username, password, remote_path, local_path, port=22):
        self.logger = logging.getLogger(__name__)
        self.host = host
        self.username = username
        self.password = password
        self.remote_path = remote_path
        self.local_path = local_path
        self.port = port
        
        # Define SFTP connection options
        self.cnopts = pysftp.CnOpts()
        self.cnopts.hostkeys = None  # Disable host key checking

    def is_target_file(self, filename):
        """Check if the file is either a PDF or Excel file."""
        # Match .pdf, .xls, .xlsx, .xlsm, etc.
        pattern = r'\.(pdf|xls[xmb]?)$'
        return bool(re.search(pattern, filename.lower()))

    def retrieve_files_by_date_range(self, start_date_str, end_date_str):
        """
        Retrieve files within a specified date range.
        
        Args:
            start_date_str (str): Start date in format 'MM/DD/YYYY'
            end_date_str (str): End date in format 'MM/DD/YYYY'
        """
        try:
            # Create local directory
            local_path = Path(self.local_path)
            local_path.mkdir(parents=True, exist_ok=True)
            
            self.logger.info(f"Local directory created/verified: {local_path}")
            
            # Convert date strings to timestamps for comparison
            start_date = datetime.strptime(start_date_str, '%m/%d/%Y')
            end_date = datetime.strptime(end_date_str, '%m/%d/%Y')
            
            # Ensure end date is at the end of the day for inclusive comparison
            end_date = end_date.replace(hour=23, minute=59, second=59)
            
            self.logger.info(f"Retrieving files from {start_date} to {end_date}")

            # Connect to SFTP server
            self.logger.info(f"Connecting to {self.host}...")
            with pysftp.Connection(
                host=self.host,
                username=self.username,
                password=self.password,
                port=self.port,
                cnopts=self.cnopts
            ) as sftp:
                self.logger.info("Connected successfully")
                
                # Change to remote directory
                sftp.chdir(self.remote_path)
                self.logger.info(f"Changed to remote directory: {self.remote_path}")
                
                # List directory contents
                dir_items = sftp.listdir_attr()
                self.logger.info(f"Found {len(dir_items)} items in directory")
                
                # Filter and download files
                count = {'pdf': 0, 'excel': 0}
                for item in dir_items:
                    # Convert timestamp to datetime
                    file_date = datetime.fromtimestamp(item.st_mtime)
                    
                    # Check if file is within date range and matches our criteria
                    if (start_date <= file_date <= end_date and 
                        self.is_target_file(item.filename)):
                        
                        remote_path = f"{self.remote_path}/{item.filename}"
                        local_file = local_path / item.filename
                        
                        self.logger.info(f"Downloading {item.filename}...")
                        sftp.get(remote_path, str(local_file))
                        
                        # Update counter based on file type
                        if item.filename.lower().endswith('.pdf'):
                            count['pdf'] += 1
                        else:
                            count['excel'] += 1
                
                self.logger.info(f"Downloaded {count['pdf']} PDF files and {count['excel']} Excel files")
            
            # Verify downloads
            downloaded_pdfs = list(local_path.rglob('*.pdf'))
            downloaded_excel = list(local_path.rglob('*.xls*'))
            self.logger.info(f"Files in destination directory: {len(downloaded_pdfs)} PDFs, {len(downloaded_excel)} Excel files")
            
            return count
            
        except Exception as e:
            self.logger.error(f"An error occurred: {str(e)}")
            import traceback
            self.logger.error(f"Traceback:\n{traceback.format_exc()}")
            return None

    def retrieve_files(self, date_str):
        """
        Maintain backward compatibility by allowing single date retrieval.
        This method now calls retrieve_files_by_date_range with the same date for start and end.
        """
        return self.retrieve_files_by_date_range(date_str, date_str)


# Example usage
if __name__ == "__main__":
    try:
        retriever = SFTPFileRetriever(
            host="",
            username="",
            password="",
            remote_path="",
            local_path=fr'Files{datetime.now().strftime("%Y%m%d_%H%M%S")}',
            port=''
        )
        
        # Example 1: Get today's files (single date)
        today = datetime.now().strftime("%m/%d/%Y")
        retriever.retrieve_files(today)
        
        # Example 2: Get files from a date range (last 7 days)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=5)
        retriever.retrieve_files_by_date_range(
            start_date.strftime("%m/%d/%Y"),
            end_date.strftime("%m/%d/%Y")
        )
        
    except ImportError:
        print("Please install required packages:")
        print("pip install paramiko pysftp")



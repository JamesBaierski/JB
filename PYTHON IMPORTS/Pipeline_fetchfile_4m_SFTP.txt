import paramiko
import pysftp
import os
from datetime import datetime
import logging
from pathlib import Path

# Disable host key checking
import warnings
warnings.filterwarnings('ignore', 'Unknown ssh-rsa host key')

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('sftp_retriever.log', mode='w'),
        logging.StreamHandler()
    ]
)

class SFTPFileRetriever:
    def __init__(self, host, username, password, remote_path, local_path, port=22):
        self.logger = logging.getLogger(__name__)
        self.host = host
        self.username = username
        self.password = password
        self.remote_path = remote_path
        self.local_path = local_path
        self.port = port
        
        # Define SFTP connection options
        self.cnopts = pysftp.CnOpts()
        self.cnopts.hostkeys = None  # Disable host key checking

    def retrieve_files(self, date_str):
        try:
            # Create local directory
            local_path = Path(self.local_path)
            local_path.mkdir(parents=True, exist_ok=True)
            
            self.logger.info(f"Local directory created/verified: {local_path}")
            
            # Convert date string to timestamp for comparison
            target_date = datetime.strptime(date_str, '%m/%d/%Y')
            self.logger.info(f"Retrieving files from date: {target_date}")

            # Connect to SFTP server
            self.logger.info(f"Connecting to {self.host}...")
            with pysftp.Connection(
                host=self.host,
                username=self.username,
                password=self.password,
                port=self.port,
                cnopts=self.cnopts
            ) as sftp:
                self.logger.info("Connected successfully")
                
                # Change to remote directory
                sftp.chdir(self.remote_path)
                self.logger.info(f"Changed to remote directory: {self.remote_path}")
                
                # List directory contents
                dir_items = sftp.listdir_attr()
                self.logger.info(f"Found {len(dir_items)} items in directory")
                
                # Define allowed file extensions
                allowed_extensions = ('.csv', '.xls', '.xlsx', '.xlsm')
                
                # Filter and download files
                count = 0
                for item in dir_items:
                    # Convert timestamp to datetime
                    file_date = datetime.fromtimestamp(item.st_mtime)
                    
                    # Check if file matches our criteria
                    if (file_date.date() == target_date.date() and 
                        any(item.filename.lower().endswith(ext) for ext in allowed_extensions)):
                        
                        remote_path = f"{self.remote_path}/{item.filename}"
                        local_file = local_path / item.filename
                        
                        self.logger.info(f"Downloading {item.filename}...")
                        sftp.get(remote_path, str(local_file))
                        count += 1
                
                self.logger.info(f"Downloaded {count} files")
            
            # Verify downloads
            downloaded_files = []
            for ext in allowed_extensions:
                downloaded_files.extend(list(local_path.rglob(f'*{ext}')))
            self.logger.info(f"Number of files in destination directory: {len(downloaded_files)}")
            
        except Exception as e:
            self.logger.error(f"An error occurred: {str(e)}")
            import traceback
            self.logger.error(f"Traceback:\n{traceback.format_exc()}")


# Example usage
if __name__ == "__main__":
    try:
        retriever = SFTPFileRetriever(
            host=,
            username=,
            password=,
            remote_path=,
            local_path=r'',
            port=
        )
        
        # Get today's files
        today = datetime.now().strftime("%m/%d/%Y")
        retriever.retrieve_files(today)
        
    except ImportError:
        print("Please install required packages:")
        print("pip install paramiko pysftp")
